@use "sass:color";
@import "variables/colors.scss";

@mixin set-colors($app-color) {
  background-color: $app-color !important;

  &-text {
    color: $app-color !important;
  }

  &-dark {
    // ?: `darken` deprecated, so 2 options: `scale` or `adjust`
    // ?: `scale` CORRECTLY darkens the given color, WITHOUT affecting its lighting/lightness
    // ?: `adjust` for a given color, negative percent $lightness, and `$space: hsl` preserves `darken` behavior
    background-color: color.adjust($app-color, $lightness: -5%, $space: hsl) !important;
    &-text {
      color: color.adjust($app-color, $lightness: -5%, $space: hsl) !important;
    }
  }
  &-light {
    // ?: Similar to `darken`, `lighten` has been deprecated so `scale` and `adjust` similarly can be used
    background-color: color.adjust($app-color, $lightness: 5%, $space: hsl) !important;
    &-text {
      color: color.adjust($app-color, $lightness: 5%, $space: hsl) !important;
    }
  }
}

.transparent {
  @include set-colors(transparent);
}

//! My personal color scheme
.app-brand-blue {
  @include set-colors($brand-blue);
}

.app-light-accent {
  @include set-colors($light-accent);
}

.app-dark-accent {
  @include set-colors($dark-accent);
}

.app-blue {
  @include set-colors($blue);
}

.app-cyan {
  @include set-colors($cyan);
}

.app-yellow {
  @include set-colors($yellow);
}

.app-green {
  @include set-colors($green);
}

.app-red {
  @include set-colors($red);
}

.app-gray {
  @include set-colors($gray);
}

.app-white {
  @include set-colors($white);
}

//! Semantic/Fomantic UI Color options
//? Just tack these onto class attr <element class="red" /> and all set!
//* red, orange, yellow, olive, green, teal,
//* blue, violet, purple, pink, brown, black
// Bootstrap
//@import "~bootstrap/scss/bootstrap";

//! Variables
@import "variables/colors.scss";
@import "variables/spacing.scss";
@import "variables/typography.scss";
//? @use helps w/ scope but Laravel preloads Bootstrap so @import overrides it easily
//? With tweaking, @use works as intended. (Delete Bootstrap npm, fix mix.js, and index.blade, etc.)
//? BUT here @forward ensures 'Variables' can be used anywhere this stylesheet is '@import/@use'd

//! Fonts
//@import "https://fonts.googleapis.com/css?family=Nunito"; //? @import can grab actual urls. @use cannot

//! Utilities
@import "app_colors.scss";
@import "borders.scss";
@import "dimensions.scss";
@import "flex.scss";
@import "margins.scss";
@import "paddings.scss";
@import "typography.scss";

//! Modules
@import "forms.scss";

//! App-Wide Stylings
//* Ideally only very basic or very specific CSS rules declared here

html {
  overflow-x: hidden; //* Seems to prevent Recaptcha from oversizing Mobile
}

//* Example of a very basic one
body {
    background-color: $cyan;
    min-width: 280px !important; //* Helps the new smallest mobile device Galaxy Fold
}

h1,
h2,
h3 {
    font-weight: bold;
    color: #fff !important;
}

a { //* Hyperlink consistency is ALWAYS best
  color: #fff;
  font-weight: bold;
  text-decoration: underline;
  &:hover {
    color: $light-accent;
  }
}
i { //* Prevents icons from getting parent stylings (like underlines)
  text-decoration: none !important;
}

.ui.divider {
    background: #ffffff50 !important;
}

.text-centered {
    text-align: center;
}

//* The following two relate to the navbar links (this first one needs more specificity though)
.only.row .item {
    //? Removes thin translucent lines to replace with different types of borders
    &:hover {
        border-bottom: 1px solid white;
    }

    &::before {
        background: none;
    }

    .right.menu .item::before {
        background: none;
    }
}

//* Example of a very specific case
@media screen and (max-width: 991px) {
    .router-link-active {
        border-top: 1px solid white !important;
    }
}

.router-link-active {
    background-color: $cyan !important;
    border-bottom: 1px solid white !important;

    &:hover {
        background-color: $light-accent !important;
    }
}

//? CSS Conventions to consider
//! BEM Convention */
/* Example Modifier - Uses '--' to notate a modifier and what it does
.table-body-row--orange {
  background-color: orange;
}
*/
/* Example Child Element - Uses '__' to notate a child element and it's base styling
.table-body-row__table-data {
  background-color: blue;
}
*/

//! OOCSS may be better option despite complexity thanks to Sass */
//* Reasoning */
/* 1st rule - Separate structure from skin - DRY
   Structure - less noticeable props - height, margins, border-radius 
   Skin - Immediately apparent props - color, font, shadows, gradients */
/* 2nd rule - Separate content from container - Increase reusability by avoiding child selectors
   Instead of table .list .list-header -> .list-header will do just fine! and can be repurposed outside of this specific table
   Instead of #sidebar -> .sidebar works just as well and becomes reusable! */
/* With these concepts in mind, leveraging SCSS makes OOCSS even more simple
   1. Use '%' - 'placeholder selector' to create skins & structures you can @extend (Prevents risky @extend's that step on each other)
   2. Use '&' to create suffixes within classes that help specify needs of particular html elem
   Ex: 
%button {
  min-width: 100px;
  padding: 1em;
  border-radius: 1em;
}
%twitter-bg {
  background-color: #55acee;
  color: #fff;
}

   Now you can choose to place @extend %button either in the '&' or applying it to all of .btn!
.btn {
  &--twitter {
    @extend %button;
    @extend %twitter-background;
  }
}
.btn {
  @extend %button;
  &--twitter {
    @extend %twitter-background;
  }
}
*/

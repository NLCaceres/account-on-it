{"version":3,"sources":["webpack:///app_colors.scss","webpack:///app.scss","webpack:///borders.scss","webpack:///utility.scss","webpack:///dimensions.scss","webpack:///flex.scss","webpack:///margins.scss","webpack:///paddings.scss","webpack:///forms.scss","webpack:///variables/typography.scss"],"names":[],"mappings":"wHAcA;EAXE;ACGF;;ADDE;EACE;ACIJ;;ADDE;EACE;ACIJ;;ADIA;EAfE;ACeF;;ADbE;EACE;ACgBJ;;ADbE;EACE;ACgBJ;;ADJA;EAnBE;AC2BF;;ADzBE;EACE;AC4BJ;;ADzBE;EACE;AC4BJ;;ADZA;EAvBE;ACuCF;;ADrCE;EACE;ACwCJ;;ADrCE;EACE;ACwCJ;;ADpBA;EA3BE;ACmDF;;ADjDE;EACE;ACoDJ;;ADjDE;EACE;ACoDJ;;AD5BA;EA/BE;AC+DF;;AD7DE;EACE;ACgEJ;;AD7DE;EACE;ACgEJ;;ADpCA;EAnCE;AC2EF;;ADzEE;EACE;AC4EJ;;ADzEE;EACE;AC4EJ;;AD5CA;EAvCE;ACuFF;;ADrFE;EACE;ACwFJ;;ADrFE;EACE;ACwFJ;;ADpDA;EA3CE;ACmGF;;ADjGE;EACE;ACoGJ;;ADjGE;EACE;ACoGJ;;AD5DA;EA/CE;AC+GF;;AD7GE;EACE;ACgHJ;;AD7GE;EACE;ACgHJ;;AC1GQ;EAEQ;AD4GhB;;AC9GQ;EAMQ;AD4GhB;;AClHQ;EAUQ;AD4GhB;;ACtHQ;EAcQ;AD4GhB;;ACpDA;EAEI;ADsDJ;;AE1GI;EAQI;AFsGR;;AE9GI;EAQI;AF0GR;;AElHI;EAQI;AF8GR;;ACxGQ;EAoBQ;ADwFhB;;AE1HI;EAQI;AFsHR;;AE9HI;EAQI;AF0HR;;AElII;EAQI;AF8HR;;ACxHQ;EAoBQ;ADwGhB;;AE1II;EAQI;AFsIR;;AE9II;EAQI;AF0IR;;AElJI;EAQI;AF8IR;;ACxIQ;EAoBQ;ADwHhB;;AE1JI;EAQI;AFsJR;;AE9JI;EAQI;AF0JR;;AElKI;EAQI;AF8JR;;ACxJQ;EAoBQ;ADwIhB;;AE1KI;EAQI;AFsKR;;AE9KI;EAQI;AF0KR;;AElLI;EAQI;AF8KR;;ACxKQ;ECjCJ;EAAA;AF8MJ;;AE3LI;EAQI;AFuLR;;AE/LI;EAQI;AF2LR;;AEnMI;EAQI;AF+LR;;AEvMI;EAQI;AFmMR;;AE3MI;EAQI;AFuMR;;AE/MI;EAQI;AF2MR;;ACrMQ;ECjCJ;EAAA;AF2OJ;;AExNI;EAQI;AFoNR;;AE5NI;EAQI;AFwNR;;AEhOI;EAQI;AF4NR;;AEpOI;EAQI;AFgOR;;AExOI;EAQI;AFoOR;;AE5OI;EAQI;AFwOR;;ACrLI;EAEI;ADuLR;;AEpPI;EAQI;AFgPR;;AExPI;EAQI;AFoPR;;AC9OQ;EAoBQ;AD8NhB;;AEhQI;EAQI;AF4PR;;AEpQI;EAQI;AFgQR;;AC1PQ;EAoBQ;AD0OhB;;AE5QI;EAQI;AFwQR;;AEhRI;EAQI;AF4QR;;ACtQQ;EAoBQ;ADsPhB;;AExRI;EAQI;AFoRR;;AE5RI;EAQI;AFwRR;;AClRQ;EAoBQ;ADkQhB;;AEpSI;EAQI;AFgSR;;AExSI;EAQI;AFoSR;;AC9RQ;ECjCJ;EAAA;AFoUJ;;AEjTI;EAQI;AF6SR;;AErTI;EAQI;AFiTR;;AEzTI;EAQI;AFqTR;;AE7TI;EAQI;AFyTR;;ACnTQ;ECjCJ;EAAA;AFyVJ;;AEtUI;EAQI;AFkUR;;AE1UI;EAQI;AFsUR;;AE9UI;EAQI;AF0UR;;AElVI;EAQI;AF8UR;;AGzWM;EACE;AH4WR;;AG7WM;EACE;AHgXR;;AGjXM;EACE;AHoXR;;AGrXM;EACE;AHwXR;;AGzXM;EACE;AH4XR;;AG7XM;EACE;AHgYR;;AGjYM;EACE;AHoYR;;AGrYM;EACE;AHwYR;;AGlYA;EACE;AHqYF;;AGlYA;EACE;EACA;EACA;AHqYF;;AIpaA;EACI;AJuaJ;;AIraI;EACI;EACA;AJwaR;;AIpaA;EACI;AJuaJ;;AIpaA;EACI;AJuaJ;;AIpaA;EACI;AJuaJ;;AIpaA;EACI;AJuaJ;;AIpaA;EACI;AJuaJ;;AK3aE;EHLE;EAAA;EAAA;EAAA;AFubJ;;AKxaM;EAQI;ALoaV;;AK5aM;EAQI;ALwaV;;AKhbM;EAQI;AL4aV;;AKpbM;EAQI;ALgbV;;AKxbM;EHfF;EAAA;AF4cJ;;AK7bM;EHfF;EAAA;AFidJ;;AK5cE;EHLE;EAAA;EAAA;EAAA;AFwdJ;;AKzcM;EAQI;ALqcV;;AK7cM;EAQI;ALycV;;AKjdM;EAQI;AL6cV;;AKrdM;EAQI;ALidV;;AKzdM;EHfF;EAAA;AF6eJ;;AK9dM;EHfF;EAAA;AFkfJ;;AK7eE;EHLE;EAAA;EAAA;EAAA;AFyfJ;;AK1eM;EAQI;ALseV;;AK9eM;EAQI;AL0eV;;AKlfM;EAQI;AL8eV;;AKtfM;EAQI;ALkfV;;AK1fM;EHfF;EAAA;AF8gBJ;;AK/fM;EHfF;EAAA;AFmhBJ;;AK9gBE;EHLE;EAAA;EAAA;EAAA;AF0hBJ;;AK3gBM;EAQI;ALugBV;;AK/gBM;EAQI;AL2gBV;;AKnhBM;EAQI;AL+gBV;;AKvhBM;EAQI;ALmhBV;;AK3hBM;EHfF;EAAA;AF+iBJ;;AKhiBM;EHfF;EAAA;AFojBJ;;AK/iBE;EHLE;EAAA;EAAA;EAAA;AF2jBJ;;AK5iBM;EAQI;ALwiBV;;AKhjBM;EAQI;AL4iBV;;AKpjBM;EAQI;ALgjBV;;AKxjBM;EAQI;ALojBV;;AK5jBM;EHfF;EAAA;AFglBJ;;AKjkBM;EHfF;EAAA;AFqlBJ;;AKhlBE;EHLE;EAAA;EAAA;EAAA;AF4lBJ;;AK7kBM;EAQI;ALykBV;;AKjlBM;EAQI;AL6kBV;;AKrlBM;EAQI;ALilBV;;AKzlBM;EAQI;ALqlBV;;AK7lBM;EHfF;EAAA;AFinBJ;;AKlmBM;EHfF;EAAA;AFsnBJ;;AKjnBE;EHLE;EAAA;EAAA;EAAA;AF6nBJ;;AK9mBM;EAQI;AL0mBV;;AKlnBM;EAQI;AL8mBV;;AKtnBM;EAQI;ALknBV;;AK1nBM;EAQI;ALsnBV;;AK9nBM;EHfF;EAAA;AFkpBJ;;AKnoBM;EHfF;EAAA;AFupBJ;;AMnpBE;EJJE;EAAA;EAAA;EAAA;AF8pBJ;;AMjpBM;EAUI;AN2oBV;;AMrpBM;EAUI;AN+oBV;;AMzpBM;EAUI;ANmpBV;;AM7pBM;EAUI;ANupBV;;AMjqBM;EJbF;EAAA;AFmrBJ;;AMtqBM;EJbF;EAAA;AFwrBJ;;AMprBE;EJJE;EAAA;EAAA;EAAA;AF+rBJ;;AMlrBM;EAUI;AN4qBV;;AMtrBM;EAUI;ANgrBV;;AM1rBM;EAUI;ANorBV;;AM9rBM;EAUI;ANwrBV;;AMlsBM;EJbF;EAAA;AFotBJ;;AMvsBM;EJbF;EAAA;AFytBJ;;AMrtBE;EJJE;EAAA;EAAA;EAAA;AFguBJ;;AMntBM;EAUI;AN6sBV;;AMvtBM;EAUI;ANitBV;;AM3tBM;EAUI;ANqtBV;;AM/tBM;EAUI;ANytBV;;AMnuBM;EJbF;EAAA;AFqvBJ;;AMxuBM;EJbF;EAAA;AF0vBJ;;AMtvBE;EJJE;EAAA;EAAA;EAAA;AFiwBJ;;AMpvBM;EAUI;AN8uBV;;AMxvBM;EAUI;ANkvBV;;AM5vBM;EAUI;ANsvBV;;AMhwBM;EAUI;AN0vBV;;AMpwBM;EJbF;EAAA;AFsxBJ;;AMzwBM;EJbF;EAAA;AF2xBJ;;AMvxBE;EJJE;EAAA;EAAA;EAAA;AFkyBJ;;AMrxBM;EAUI;AN+wBV;;AMzxBM;EAUI;ANmxBV;;AM7xBM;EAUI;ANuxBV;;AMjyBM;EAUI;AN2xBV;;AMryBM;EJbF;EAAA;AFuzBJ;;AM1yBM;EJbF;EAAA;AF4zBJ;;AMxzBE;EJJE;EAAA;EAAA;EAAA;AFm0BJ;;AMtzBM;EAUI;ANgzBV;;AM1zBM;EAUI;ANozBV;;AM9zBM;EAUI;ANwzBV;;AMl0BM;EAUI;AN4zBV;;AMt0BM;EJbF;EAAA;AFw1BJ;;AM30BM;EJbF;EAAA;AF61BJ;;AMz1BE;EJJE;EAAA;EAAA;EAAA;AFo2BJ;;AMv1BM;EAUI;ANi1BV;;AM31BM;EAUI;ANq1BV;;AM/1BM;EAUI;ANy1BV;;AMn2BM;EAUI;AN61BV;;AMv2BM;EJbF;EAAA;AFy3BJ;;AM52BM;EJbF;EAAA;AF83BJ;;AO54BA;EACE;EACA;ECIA;AR44BF;;AO54BA;EAEE;AP84BF;;AO34BA;ECLE;EDOA;AP84BF;;AAj4BA;EACI;AAo4BJ;;AAj4BA;;;EAGI;EACA;AAo4BJ;;AAj4BA;EACI;AAo4BJ;;AAj4BA;EACI;AAo4BJ;;AA93BI;EACI;AAi4BR;;AA93BI;EACI;AAi4BR;;AA93BI;EACI;AAi4BR;;AA53BA;EACI;IACI;EA+3BN;AACF;;AA53BA;EACI;EACA;AA+3BJ;;AA73BI;EACI;AAg4BR","file":"/css/app.css","sourcesContent":["@import \"variables/colors.scss\";\n\n@mixin set-colors($app-color) {\n  background-color: $app-color !important;\n\n  &-text {\n    color: $app-color !important;\n  }\n\n  &-mid {\n    background-color: darken($app-color, 5%) !important;\n  }\n}\n\n.app-brand-blue {\n  @include set-colors($brand-blue);\n}\n\n.app-light-accent {\n  @include set-colors($light-accent);\n}\n\n.app-dark-accent {\n  @include set-colors($dark-accent);\n}\n\n.app-blue {\n  @include set-colors($blue);\n}\n\n.app-cyan {\n  @include set-colors($cyan);\n}\n\n.app-yellow {\n  @include set-colors($yellow);\n}\n\n.app-green {\n  @include set-colors($green);\n}\n\n.app-red {\n  @include set-colors($red);\n}\n\n.app-gray {\n  @include set-colors($gray);\n}\n\n.app-white {\n  @include set-colors($white);\n}","// Bootstrap\n//@import \"~bootstrap/scss/bootstrap\";\n\n//! Variables\n@import \"variables/colors.scss\";\n@import \"variables/spacing.scss\";\n@import \"variables/typography.scss\";\n//? @use helps w/ scope but Laravel preloads Bootstrap so @import overrides it easily\n//? With tweaking, @use works as intended. (Delete Bootstrap npm, fix mix.js, and index.blade, etc.)\n//? BUT here @forward ensures 'Variables' can be used anywhere this stylesheet is '@import/@use'd\n\n//! Fonts\n//@import \"https://fonts.googleapis.com/css?family=Nunito\"; //? @import can grab actual urls. @use cannot\n\n//! Utilities\n@import \"app_colors.scss\";\n@import \"borders.scss\";\n@import \"dimensions.scss\";\n@import \"flex.scss\";\n@import \"margins.scss\";\n@import \"paddings.scss\";\n\n//! Modules\n@import \"forms.scss\";\n\n//! App-Wide Stylings\n//* Ideally only very basic or very specific CSS rules declared here\n\n//* Example of a very basic one\nbody {\n    background-color: $cyan;\n}\n\nh1,\nh2,\nh3 {\n    font-weight: bold;\n    color: #fff !important;\n}\n\n.ui.divider {\n    background: #ffffff50 !important;\n}\n\n.text-centered {\n    text-align: center;\n}\n\n//* The following two relate to the navbar links (this first one needs more specificity though)\n.only.row .item {\n    //? Removes thin translucent lines to replace with different types of borders\n    &:hover {\n        border-bottom: 1px solid white;\n    }\n\n    &::before {\n        background: none;\n    }\n\n    .right.menu .item::before {\n        background: none;\n    }\n}\n\n//* Example of a very specific case\n@media screen and (max-width: 991px) {\n    .router-link-active {\n        border-top: 1px solid white !important;\n    }\n}\n\n.router-link-active {\n    background-color: $cyan !important;\n    border-bottom: 1px solid white !important;\n\n    &:hover {\n        background-color: $light-accent !important;\n    }\n}\n","@import 'utility.scss';\n//* Goal is to form various colors and styles of borderings\n//* Format: .border-side-color E.g. border-r-light or border-y-white\n\n$rounded-sides: ('l', 'r', 'x', 'none');\n\n$border-sides: ('t':'border-top',\n    'r':'border-right',\n    'l':'border-left',\n    'b':'border-bottom',\n    'x':('border-left', 'border-right'),\n    'y':('border-top', 'border-bottom'));\n$border-slim: 2px; //* Describes the thickness (thin is 1px, medium is 3px)\n\n.rounded {\n    @each $side in $rounded-sides {\n        &-#{$side} {\n            @if $side==\"l\" {\n                border-radius: 5px 0px 0px 5px !important;\n            }\n\n            @else if $side=='r' {\n                border-radius: 0px 5px 5px 0px !important;\n            }\n\n            @else if $side=='x' {\n                border-radius: 5px !important;\n            }\n\n            @else {\n                border-radius: initial !important;\n            }\n        }\n    }\n\n}\n\n@mixin border-side-color-combos($color-variations, $color-var-vals, $standard-val) {\n\n    $color-vars: (); //* Arr & maps immutable \n\n    @each $color-var in $color-variations {\n        //* To combat immutability, just make a new map with old's value each loop\n        $color-vars: map-merge($color-vars, ($color-var : border)); //* Uses border shorthand later\n    }\n\n    @include set-suffixes($color-var-vals, $color-vars);\n\n    @each $side,\n    $attr in $border-sides {\n        &-#{$side} {\n\n\n            @if $side=='x'or $side=='y' {\n                @include set-sides($standard-val, $attr);\n\n                //* Set up suffixes for alternative values for EACH side \n                @each $attribute in $attr {\n                    $color-vars: ();\n\n                    @each $color-var in $color-variations {\n                        $color-vars: map-merge($color-vars, ($color-var : $attribute));\n                    }\n\n                    @include set-suffixes($color-var-vals, $color-vars);\n                }\n            }\n\n            @else {\n                //* Standard value for side\n                #{$attr}: $standard-val !important;\n\n                //* Set up suffixes for alternative values for side\n                $color-vars: (); //* Arr & maps immutable \n\n                @each $color-var in $color-variations {\n                    //* To combat immutability, just make a new map with old's value each loop\n                    $color-vars: map-merge($color-vars, ($color-var : $attr));\n                }\n\n                @include set-suffixes($color-var-vals, $color-vars);\n            }\n        }\n    }\n}\n\n.border {\n    $standard-val: thin solid black; //* '!important' already included in mixin used later\n    border: $standard-val !important;\n\n    $normal-color-vars: ('light', 'white', 'none');\n    $normal-color-variation-vals: (thin solid #ffffff55, thin solid white, none);\n\n    @include border-side-color-combos($normal-color-vars, $normal-color-variation-vals, $standard-val);\n\n    &-slim {\n        $slim-val: $border-slim solid black; //* Set up the standard for this suffix version\n        border: $slim-val; //* Use it \n\n        $slim-color-vars: ('light', 'white');\n        $slim-color-variation-vals: ($border-slim solid #ffffff55, $border-slim solid white, none);\n\n        @include border-side-color-combos($slim-color-vars, $slim-color-variation-vals, $slim-val);\n    }\n}","//* Attempt to make this as reusable as possible\n//* A fair # of css attrs revolve around 4 points, border, radius, margin, padding etc.\n//* Goal: Give which side (effectively attr) and val, return css all set\n\n//! The following 2 may receive update to handle an arr of vals but may be ridiculously tough to account for\n\n//! 4 Corners Attribute Setting Mixin\n@mixin set-sides($val, $sides) {\n  @if length($sides)>4 {\n    @error \"Unknown additional attribute. Must contain at most 4 attributes related to each possible side\";\n  }\n\n  @if length($sides)==0 {\n    @error \"Missing which sides will be set\";\n  }\n\n  @each $side in $sides {\n    #{$side}: $val !important;\n  }\n}\n\n//! Suffix Addition Mixin\n@mixin set-suffixes($vals, $suffixesWithAttr) {\n  //* Suffixes with Attr should be a map ($suffix : $attr)\n  //* Optionally attr can contain arr ($suffix : ($attr1, $attr2, $attr3))\n  $suffixes: map-keys($map: $suffixesWithAttr);\n  $suffix-length: length($suffixes);\n\n  @if $suffix-length==0 {\n    @error 'Missing suffixes';\n  }\n\n  //? Sass does NOT start arrs from 0!\n  @for $i from 1 through $suffix-length {\n    $suffix: nth($list: $suffixes, $n: $i);\n\n    &-#{$suffix} {\n      $attributes: map-get($map: $suffixesWithAttr, $key: $suffix);\n\n      //? 'through' includes last value, 'until' does NOT\n      @for $j from 1 through length($attributes) {\n        $attr: nth($list: $attributes, $n: $j);\n        //* $val MUST use $i because it relates to suffix, NOT the attr (attr changes, suffix and it's val do NOT)\n        $val: nth($list: $vals, $n: $i);\n        #{$attr}: $val !important;\n      }\n    }\n  }\n}","//* Goal here is to have classes to make responsive width and heights\n//* Using width & height at 25, 50, 75, and 100 percent\n//* Format is .dimension-percentile E.g. h-25 or w-75\n\n$dimension-percentiles: (25, 50, 75, 100); //* Percentiles\n\n$dimensions: ('h':'height', 'w':'width'); //* Height and width\n\n@each $dimension-class,\n$dimension-attr in $dimensions {\n\n  .#{$dimension-class} {\n\n    @each $dimension-percentile in $dimension-percentiles {\n\n      //? Sass does NOT really have type cast funcs, so below are some tricks to do so\n      //? Auto cast num - string to form the suffix\n      &-#{$dimension-percentile} {\n        #{$dimension-attr}: $dimension-percentile * 1% !important; //? Multiply by 1(unit type) & $result = ($var * 1)unit-type e.g. (25 * 1)% = 25%\n      }\n    }\n  }\n}\n\n.overflow-x {\n  overflow-x: scroll;\n}\n\n.sticky-el {\n  position: -webkit-sticky;\n  position: sticky;\n  top: 0;\n}",".flexed {\n    display: flex;\n\n    &-spaced-around {\n        display: flex;\n        justify-content: space-around;\n    }\n}\n\n.spaced-around {\n    justify-content: space-around;\n}\n\n.align-baselines {\n    align-items: baseline;\n}\n\n.i-flex {\n    display: inline-flex;\n}\n\n.hidden-el {\n    display: none;\n}\n\n.flex-stretch {\n    flex-grow: 1;\n}","@import 'utility.scss';\n\n$margin-classes: (\"no-margin\":$spacer-0,\n  'm-xs':$spacer-1,\n  'm-sm':$spacer-2,\n  'm-md':$spacer-3,\n  'm-lg':$spacer-4,\n  'm-xl':$spacer-5,\n  'm-xxl':$spacer-6); //* Each margin class gets spaced out the same amount\n\n$margin-suffixes: ('-t':'margin-top',\n  '-r':'margin-right',\n  '-l':'margin-left',\n  '-b':'margin-bottom',\n  '-x':('margin-left', 'margin-right'),\n  '-y':('margin-top', 'margin-bottom')); //* All get attribute val, except x & y that get 2 (arr must be pulled out by mixin)\n\n$margin-attrs: ('margin-top', 'margin-right', 'margin-bottom', 'margin-left');\n\n//* Takes each size of margin and sets the value \n@each $margin-class,\n$spacer in $margin-classes {\n  .#{$margin-class} {\n\n    //* Mixin that iterates and sets each side specified\n    @include set-sides($spacer, $margin-attrs);\n\n    //* Creates separate suffixed version to handle each side or combo of sides\n    @each $margin-suffix,\n    $attr in $margin-suffixes {\n\n\n      &#{$margin-suffix} {\n\n        //* Both x (l & r) and y (t & b) use mixin to pull out those 2 attributes\n        @if $margin-suffix=='-x'or $margin-suffix=='-y' {\n          @include set-sides($spacer, $attr);\n        }\n\n        @else {\n          #{$attr}: $spacer !important;\n        }\n      }\n    }\n  }\n}","@import 'utility.scss';\n\n$padding-classes: (\"no-padding\":$spacer-0,\n  'p-xs':$spacer-1,\n  'p-sm':$spacer-2,\n  'p-md':$spacer-3,\n  'p-lg':$spacer-4,\n  'p-xl':$spacer-5,\n  'p-xxl':$spacer-6); //? Each padding class gets spaced out the same amount\n\n$padding-suffixes: ('-t':'padding-top',\n  '-r':'padding-right',\n  '-l':'padding-left',\n  '-b':'padding-bottom',\n  '-x':('padding-left', 'padding-right'),\n  '-y':('padding-top', 'padding-bottom')); //?\n\n$padding-attrs: ('padding-top', 'padding-right', 'padding-bottom', 'padding-left');\n\n@each $padding-class,\n$spacer in $padding-classes {\n  .#{$padding-class} {\n\n    //? Mixin that iterates and sets each side specified\n    @include set-sides($spacer, $padding-attrs);\n\n    @each $padding-suffix,\n    $attr in $padding-suffixes {\n\n      //? Creates separate suffixed version to handle each side or combo of sides\n      &#{$padding-suffix} {\n        @if $padding-suffix=='-x' {\n          @include set-sides($spacer, $attr);\n        }\n\n        @else if $padding-suffix=='-y' {\n          @include set-sides($spacer, $attr);\n        }\n\n        @else {\n          #{$attr}: $spacer !important;\n        }\n      }\n    }\n  }\n}","@import 'variables/typography.scss';\n@import 'variables/colors.scss';\n\n%label-skin {\n  font-size: larger !important;\n  color: white !important;\n  @include set-text-shadow(2px, black);\n}\n\n.form-label {\n  @extend %label-skin;\n  margin-bottom: 0.5em !important;\n}\n\n.form-validation-err {\n  @include set-text-shadow(1px, black);\n  color: $red;\n}","@import \"https://fonts.googleapis.com/css?family=Nunito\"; //? @import can grab actual urls. @use cannot\n\n// Typography\n$font-size-base: 0.9rem;\n$line-height-base: 1.6;\n$font-family-sans-serif: \"Nunito\",\nsans-serif;\n\n@mixin set-text-shadow($size, $color) {\n  text-shadow: (-1*$size) $size 0 $color, $size $size 0 $color, $size (-1*$size) 0 $color, (-1*$size) (-1*$size) 0 $color;\n}"],"sourceRoot":""}
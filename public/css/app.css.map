{"version":3,"sources":["webpack:///./resources/sass/app_colors.scss","webpack:///./resources/sass/app.scss","webpack:///./resources/sass/borders.scss","webpack:///./resources/sass/utility.scss","webpack:///./resources/sass/dimensions.scss","webpack:///./resources/sass/flex.scss","webpack:///./resources/sass/margins.scss","webpack:///./resources/sass/paddings.scss","webpack:///./resources/sass/forms.scss","webpack:///./resources/sass/variables/typography.scss"],"names":[],"mappings":"4DAcA;EAXE;CCKF;;ADHE;EACE;CCMJ;;ADHE;EACE;CCMJ;;ADEA;EAfE;CCiBF;;ADfE;EACE;CCkBJ;;ADfE;EACE;CCkBJ;;ADNA;EAnBE;CC6BF;;AD3BE;EACE;CC8BJ;;AD3BE;EACE;CC8BJ;;ADdA;EAvBE;CCyCF;;ADvCE;EACE;CC0CJ;;ADvCE;EACE;CC0CJ;;ADtBA;EA3BE;CCqDF;;ADnDE;EACE;CCsDJ;;ADnDE;EACE;CCsDJ;;AD9BA;EA/BE;CCiEF;;AD/DE;EACE;CCkEJ;;AD/DE;EACE;CCkEJ;;ADtCA;EAnCE;CC6EF;;AD3EE;EACE;CC8EJ;;AD3EE;EACE;CC8EJ;;AD9CA;EAvCE;CCyFF;;ADvFE;EACE;CC0FJ;;ADvFE;EACE;CC0FJ;;ADtDA;EA3CE;CCqGF;;ADnGE;EACE;CCsGJ;;ADnGE;EACE;CCsGJ;;AD9DA;EA/CE;CCiHF;;AD/GE;EACE;CCkHJ;;AD/GE;EACE;CCkHJ;;AC5GQ;EAEQ;CD8GhB;;AChHQ;EAMQ;CD8GhB;;ACpHQ;EAUQ;CD8GhB;;ACxHQ;EAcQ;CD8GhB;;ACtDA;EAEI;CDwDJ;;AE5GI;EAQI;CFwGR;;AEhHI;EAQI;CF4GR;;AEpHI;EAQI;CFgHR;;AC1GQ;EAoBQ;CD0FhB;;AE5HI;EAQI;CFwHR;;AEhII;EAQI;CF4HR;;AEpII;EAQI;CFgIR;;AC1HQ;EAoBQ;CD0GhB;;AE5II;EAQI;CFwIR;;AEhJI;EAQI;CF4IR;;AEpJI;EAQI;CFgJR;;AC1IQ;EAoBQ;CD0HhB;;AE5JI;EAQI;CFwJR;;AEhKI;EAQI;CF4JR;;AEpKI;EAQI;CFgKR;;AC1JQ;EAoBQ;CD0IhB;;AE5KI;EAQI;CFwKR;;AEhLI;EAQI;CF4KR;;AEpLI;EAQI;CFgLR;;AC1KQ;ECjCJ;EAAA;CFgNJ;;AE7LI;EAQI;CFyLR;;AEjMI;EAQI;CF6LR;;AErMI;EAQI;CFiMR;;AEzMI;EAQI;CFqMR;;AE7MI;EAQI;CFyMR;;AEjNI;EAQI;CF6MR;;ACvMQ;ECjCJ;EAAA;CF6OJ;;AE1NI;EAQI;CFsNR;;AE9NI;EAQI;CF0NR;;AElOI;EAQI;CF8NR;;AEtOI;EAQI;CFkOR;;AE1OI;EAQI;CFsOR;;AE9OI;EAQI;CF0OR;;ACvLI;EAEI;CDyLR;;AEtPI;EAQI;CFkPR;;AE1PI;EAQI;CFsPR;;AChPQ;EAoBQ;CDgOhB;;AElQI;EAQI;CF8PR;;AEtQI;EAQI;CFkQR;;AC5PQ;EAoBQ;CD4OhB;;AE9QI;EAQI;CF0QR;;AElRI;EAQI;CF8QR;;ACxQQ;EAoBQ;CDwPhB;;AE1RI;EAQI;CFsRR;;AE9RI;EAQI;CF0RR;;ACpRQ;EAoBQ;CDoQhB;;AEtSI;EAQI;CFkSR;;AE1SI;EAQI;CFsSR;;AChSQ;ECjCJ;EAAA;CFsUJ;;AEnTI;EAQI;CF+SR;;AEvTI;EAQI;CFmTR;;AE3TI;EAQI;CFuTR;;AE/TI;EAQI;CF2TR;;ACrTQ;ECjCJ;EAAA;CF2VJ;;AExUI;EAQI;CFoUR;;AE5UI;EAQI;CFwUR;;AEhVI;EAQI;CF4UR;;AEpVI;EAQI;CFgVR;;AG3WM;EACE;CH8WR;;AG/WM;EACE;CHkXR;;AGnXM;EACE;CHsXR;;AGvXM;EACE;CH0XR;;AG3XM;EACE;CH8XR;;AG/XM;EACE;CHkYR;;AGnYM;EACE;CHsYR;;AGvYM;EACE;CH0YR;;AGpYA;EACE;CHuYF;;AGpYA;EACE;EACA;EACA;CHuYF;;AItaA;EACI;CJyaJ;;AIvaI;EACI;EACA;CJ0aR;;AItaA;EACI;CJyaJ;;AItaA;EACI;CJyaJ;;AItaA;EACI;CJyaJ;;AItaA;EACI;CJyaJ;;AItaA;EACI;CJyaJ;;AK7aE;EHLE;EAAA;EAAA;EAAA;CFybJ;;AK1aM;EAQI;CLsaV;;AK9aM;EAQI;CL0aV;;AKlbM;EAQI;CL8aV;;AKtbM;EAQI;CLkbV;;AK1bM;EHfF;EAAA;CF8cJ;;AK/bM;EHfF;EAAA;CFmdJ;;AK9cE;EHLE;EAAA;EAAA;EAAA;CF0dJ;;AK3cM;EAQI;CLucV;;AK/cM;EAQI;CL2cV;;AKndM;EAQI;CL+cV;;AKvdM;EAQI;CLmdV;;AK3dM;EHfF;EAAA;CF+eJ;;AKheM;EHfF;EAAA;CFofJ;;AK/eE;EHLE;EAAA;EAAA;EAAA;CF2fJ;;AK5eM;EAQI;CLweV;;AKhfM;EAQI;CL4eV;;AKpfM;EAQI;CLgfV;;AKxfM;EAQI;CLofV;;AK5fM;EHfF;EAAA;CFghBJ;;AKjgBM;EHfF;EAAA;CFqhBJ;;AKhhBE;EHLE;EAAA;EAAA;EAAA;CF4hBJ;;AK7gBM;EAQI;CLygBV;;AKjhBM;EAQI;CL6gBV;;AKrhBM;EAQI;CLihBV;;AKzhBM;EAQI;CLqhBV;;AK7hBM;EHfF;EAAA;CFijBJ;;AKliBM;EHfF;EAAA;CFsjBJ;;AKjjBE;EHLE;EAAA;EAAA;EAAA;CF6jBJ;;AK9iBM;EAQI;CL0iBV;;AKljBM;EAQI;CL8iBV;;AKtjBM;EAQI;CLkjBV;;AK1jBM;EAQI;CLsjBV;;AK9jBM;EHfF;EAAA;CFklBJ;;AKnkBM;EHfF;EAAA;CFulBJ;;AKllBE;EHLE;EAAA;EAAA;EAAA;CF8lBJ;;AK/kBM;EAQI;CL2kBV;;AKnlBM;EAQI;CL+kBV;;AKvlBM;EAQI;CLmlBV;;AK3lBM;EAQI;CLulBV;;AK/lBM;EHfF;EAAA;CFmnBJ;;AKpmBM;EHfF;EAAA;CFwnBJ;;AKnnBE;EHLE;EAAA;EAAA;EAAA;CF+nBJ;;AKhnBM;EAQI;CL4mBV;;AKpnBM;EAQI;CLgnBV;;AKxnBM;EAQI;CLonBV;;AK5nBM;EAQI;CLwnBV;;AKhoBM;EHfF;EAAA;CFopBJ;;AKroBM;EHfF;EAAA;CFypBJ;;AMrpBE;EJJE;EAAA;EAAA;EAAA;CFgqBJ;;AMnpBM;EAUI;CN6oBV;;AMvpBM;EAUI;CNipBV;;AM3pBM;EAUI;CNqpBV;;AM/pBM;EAUI;CNypBV;;AMnqBM;EJbF;EAAA;CFqrBJ;;AMxqBM;EJbF;EAAA;CF0rBJ;;AMtrBE;EJJE;EAAA;EAAA;EAAA;CFisBJ;;AMprBM;EAUI;CN8qBV;;AMxrBM;EAUI;CNkrBV;;AM5rBM;EAUI;CNsrBV;;AMhsBM;EAUI;CN0rBV;;AMpsBM;EJbF;EAAA;CFstBJ;;AMzsBM;EJbF;EAAA;CF2tBJ;;AMvtBE;EJJE;EAAA;EAAA;EAAA;CFkuBJ;;AMrtBM;EAUI;CN+sBV;;AMztBM;EAUI;CNmtBV;;AM7tBM;EAUI;CNutBV;;AMjuBM;EAUI;CN2tBV;;AMruBM;EJbF;EAAA;CFuvBJ;;AM1uBM;EJbF;EAAA;CF4vBJ;;AMxvBE;EJJE;EAAA;EAAA;EAAA;CFmwBJ;;AMtvBM;EAUI;CNgvBV;;AM1vBM;EAUI;CNovBV;;AM9vBM;EAUI;CNwvBV;;AMlwBM;EAUI;CN4vBV;;AMtwBM;EJbF;EAAA;CFwxBJ;;AM3wBM;EJbF;EAAA;CF6xBJ;;AMzxBE;EJJE;EAAA;EAAA;EAAA;CFoyBJ;;AMvxBM;EAUI;CNixBV;;AM3xBM;EAUI;CNqxBV;;AM/xBM;EAUI;CNyxBV;;AMnyBM;EAUI;CN6xBV;;AMvyBM;EJbF;EAAA;CFyzBJ;;AM5yBM;EJbF;EAAA;CF8zBJ;;AM1zBE;EJJE;EAAA;EAAA;EAAA;CFq0BJ;;AMxzBM;EAUI;CNkzBV;;AM5zBM;EAUI;CNszBV;;AMh0BM;EAUI;CN0zBV;;AMp0BM;EAUI;CN8zBV;;AMx0BM;EJbF;EAAA;CF01BJ;;AM70BM;EJbF;EAAA;CF+1BJ;;AM31BE;EJJE;EAAA;EAAA;EAAA;CFs2BJ;;AMz1BM;EAUI;CNm1BV;;AM71BM;EAUI;CNu1BV;;AMj2BM;EAUI;CN21BV;;AMr2BM;EAUI;CN+1BV;;AMz2BM;EJbF;EAAA;CF23BJ;;AM92BM;EJbF;EAAA;CFg4BJ;;AO94BA;EACE;EACA;ECIA;CR84BF;;AO94BA;EAEE;CPg5BF;;AO74BA;ECLE;EDOA;CPg5BF;;AAn4BA;EACI;CAs4BJ;;AAn4BA;;;EAGI;EACA;CAs4BJ;;AAn4BA;EACI;CAs4BJ;;AAn4BA;EACI;CAs4BJ;;AA/3BI;EACI;CAk4BR;;AA/3BI;EACI;CAk4BR;;AA/3BI;EACI;CAk4BR;;AA73BA;EACI;IACI;GAg4BN;CACF;;AA73BA;EACI;EACA;CAg4BJ;;AA93BI;EACI;CAi4BR","file":"/css/app.css","sourcesContent":["@import \"variables/colors.scss\";\n\n@mixin set-colors($app-color) {\n  background-color: $app-color !important;\n\n  &-text {\n    color: $app-color !important;\n  }\n\n  &-mid {\n    background-color: darken($app-color, 5%) !important;\n  }\n}\n\n.app-brand-blue {\n  @include set-colors($brand-blue);\n}\n\n.app-light-accent {\n  @include set-colors($light-accent);\n}\n\n.app-dark-accent {\n  @include set-colors($dark-accent);\n}\n\n.app-blue {\n  @include set-colors($blue);\n}\n\n.app-cyan {\n  @include set-colors($cyan);\n}\n\n.app-yellow {\n  @include set-colors($yellow);\n}\n\n.app-green {\n  @include set-colors($green);\n}\n\n.app-red {\n  @include set-colors($red);\n}\n\n.app-gray {\n  @include set-colors($gray);\n}\n\n.app-white {\n  @include set-colors($white);\n}","// Bootstrap\n//@import \"~bootstrap/scss/bootstrap\";\n\n//! Variables\n@import \"variables/colors.scss\";\n@import \"variables/spacing.scss\";\n@import \"variables/typography.scss\";\n//? @use helps w/ scope but Laravel preloads Bootstrap so @import overrides it easily\n//? With tweaking, @use works as intended. (Delete Bootstrap npm, fix mix.js, and index.blade, etc.)\n//? BUT here @forward ensures 'Variables' can be used anywhere this stylesheet is '@import/@use'd\n\n//! Fonts\n@import \"https://fonts.googleapis.com/css?family=Nunito\"; //? @import can grab actual urls. @use cannot\n\n//! Utilities\n@import \"app_colors.scss\";\n@import \"borders.scss\";\n@import \"dimensions.scss\";\n@import \"flex.scss\";\n@import \"margins.scss\";\n@import \"paddings.scss\";\n\n//! Modules\n@import \"forms.scss\";\n\n//! App-Wide Stylings\n//* Ideally only very basic or very specific CSS rules declared here\n\n//* Example of a very basic one\nbody {\n    background-color: $cyan;\n}\n\nh1,\nh2,\nh3 {\n    font-weight: bold;\n    color: #fff !important;\n}\n\n.ui.divider {\n    background: #ffffff50 !important;\n}\n\n.text-centered {\n    text-align: center;\n}\n\n//* The following two relate to the navbar links (this first one needs more specificity though)\n.only.row .item {\n\n    //? Removes thin translucent lines to replace with different types of borders\n    &:hover {\n        border-bottom: 1px solid white;\n    }\n\n    &::before {\n        background: none;\n    }\n\n    .right.menu .item::before {\n        background: none;\n    }\n}\n\n//* Example of a very specific case\n@media screen and (max-width: 991px) {\n    .router-link-active {\n        border-top: 1px solid white !important;\n    }\n}\n\n.router-link-active {\n    background-color: $cyan !important;\n    border-bottom: 1px solid white !important;\n\n    &:hover {\n        background-color: $light-accent !important;\n    }\n}","@import 'utility.scss';\n//* Goal is to form various colors and styles of borderings\n//* Format: .border-side-color E.g. border-r-light or border-y-white\n\n$rounded-sides: ('l', 'r', 'x', 'none');\n\n$border-sides: ('t':'border-top',\n    'r':'border-right',\n    'l':'border-left',\n    'b':'border-bottom',\n    'x':('border-left', 'border-right'),\n    'y':('border-top', 'border-bottom'));\n$border-slim: 2px; //* Describes the thickness (thin is 1px, medium is 3px)\n\n.rounded {\n    @each $side in $rounded-sides {\n        &-#{$side} {\n            @if $side==\"l\" {\n                border-radius: 5px 0px 0px 5px !important;\n            }\n\n            @else if $side=='r' {\n                border-radius: 0px 5px 5px 0px !important;\n            }\n\n            @else if $side=='x' {\n                border-radius: 5px !important;\n            }\n\n            @else {\n                border-radius: initial !important;\n            }\n        }\n    }\n\n}\n\n@mixin border-side-color-combos($color-variations, $color-var-vals, $standard-val) {\n\n    $color-vars: (); //* Arr & maps immutable \n\n    @each $color-var in $color-variations {\n        //* To combat immutability, just make a new map with old's value each loop\n        $color-vars: map-merge($color-vars, ($color-var : border)); //* Uses border shorthand later\n    }\n\n    @include set-suffixes($color-var-vals, $color-vars);\n\n    @each $side,\n    $attr in $border-sides {\n        &-#{$side} {\n\n\n            @if $side=='x'or $side=='y' {\n                @include set-sides($standard-val, $attr);\n\n                //* Set up suffixes for alternative values for EACH side \n                @each $attribute in $attr {\n                    $color-vars: ();\n\n                    @each $color-var in $color-variations {\n                        $color-vars: map-merge($color-vars, ($color-var : $attribute));\n                    }\n\n                    @include set-suffixes($color-var-vals, $color-vars);\n                }\n            }\n\n            @else {\n                //* Standard value for side\n                #{$attr}: $standard-val !important;\n\n                //* Set up suffixes for alternative values for side\n                $color-vars: (); //* Arr & maps immutable \n\n                @each $color-var in $color-variations {\n                    //* To combat immutability, just make a new map with old's value each loop\n                    $color-vars: map-merge($color-vars, ($color-var : $attr));\n                }\n\n                @include set-suffixes($color-var-vals, $color-vars);\n            }\n        }\n    }\n}\n\n.border {\n    $standard-val: thin solid black; //* '!important' already included in mixin used later\n    border: $standard-val !important;\n\n    $normal-color-vars: ('light', 'white', 'none');\n    $normal-color-variation-vals: (thin solid #ffffff55, thin solid white, none);\n\n    @include border-side-color-combos($normal-color-vars, $normal-color-variation-vals, $standard-val);\n\n    &-slim {\n        $slim-val: $border-slim solid black; //* Set up the standard for this suffix version\n        border: $slim-val; //* Use it \n\n        $slim-color-vars: ('light', 'white');\n        $slim-color-variation-vals: ($border-slim solid #ffffff55, $border-slim solid white, none);\n\n        @include border-side-color-combos($slim-color-vars, $slim-color-variation-vals, $slim-val);\n    }\n}","//* Attempt to make this as reusable as possible\n//* A fair # of css attrs revolve around 4 points, border, radius, margin, padding etc.\n//* Goal: Give which side (effectively attr) and val, return css all set\n\n//! The following 2 may receive update to handle an arr of vals but may be ridiculously tough to account for\n\n//! 4 Corners Attribute Setting Mixin\n@mixin set-sides($val, $sides) {\n  @if length($sides)>4 {\n    @error \"Unknown additional attribute. Must contain at most 4 attributes related to each possible side\";\n  }\n\n  @if length($sides)==0 {\n    @error \"Missing which sides will be set\";\n  }\n\n  @each $side in $sides {\n    #{$side}: $val !important;\n  }\n}\n\n//! Suffix Addition Mixin\n@mixin set-suffixes($vals, $suffixesWithAttr) {\n  //* Suffixes with Attr should be a map ($suffix : $attr)\n  //* Optionally attr can contain arr ($suffix : ($attr1, $attr2, $attr3))\n  $suffixes: map-keys($map: $suffixesWithAttr);\n  $suffix-length: length($suffixes);\n\n  @if $suffix-length==0 {\n    @error 'Missing suffixes';\n  }\n\n  //? Sass does NOT start arrs from 0!\n  @for $i from 1 through $suffix-length {\n    $suffix: nth($list: $suffixes, $n: $i);\n\n    &-#{$suffix} {\n      $attributes: map-get($map: $suffixesWithAttr, $key: $suffix);\n\n      //? 'through' includes last value, 'until' does NOT\n      @for $j from 1 through length($attributes) {\n        $attr: nth($list: $attributes, $n: $j);\n        //* $val MUST use $i because it relates to suffix, NOT the attr (attr changes, suffix and it's val do NOT)\n        $val: nth($list: $vals, $n: $i);\n        #{$attr}: $val !important;\n      }\n    }\n  }\n}","//* Goal here is to have classes to make responsive width and heights\n//* Using width & height at 25, 50, 75, and 100 percent\n//* Format is .dimension-percentile E.g. h-25 or w-75\n\n$dimension-percentiles: (25, 50, 75, 100); //* Percentiles\n\n$dimensions: ('h':'height', 'w':'width'); //* Height and width\n\n@each $dimension-class,\n$dimension-attr in $dimensions {\n\n  .#{$dimension-class} {\n\n    @each $dimension-percentile in $dimension-percentiles {\n\n      //? Sass does NOT really have type cast funcs, so below are some tricks to do so\n      //? Auto cast num - string to form the suffix\n      &-#{$dimension-percentile} {\n        #{$dimension-attr}: $dimension-percentile * 1% !important; //? Multiply by 1(unit type) & $result = ($var * 1)unit-type e.g. (25 * 1)% = 25%\n      }\n    }\n  }\n}\n\n.overflow-x {\n  overflow-x: scroll;\n}\n\n.sticky-el {\n  position: -webkit-sticky;\n  position: sticky;\n  top: 0;\n}",".flexed {\n    display: flex;\n\n    &-spaced-around {\n        display: flex;\n        justify-content: space-around;\n    }\n}\n\n.spaced-around {\n    justify-content: space-around;\n}\n\n.align-baselines {\n    align-items: baseline;\n}\n\n.i-flex {\n    display: inline-flex;\n}\n\n.hidden-el {\n    display: none;\n}\n\n.flex-stretch {\n    flex-grow: 1;\n}","@import 'utility.scss';\n\n$margin-classes: (\"no-margin\":$spacer-0,\n  'm-xs':$spacer-1,\n  'm-sm':$spacer-2,\n  'm-md':$spacer-3,\n  'm-lg':$spacer-4,\n  'm-xl':$spacer-5,\n  'm-xxl':$spacer-6); //* Each margin class gets spaced out the same amount\n\n$margin-suffixes: ('-t':'margin-top',\n  '-r':'margin-right',\n  '-l':'margin-left',\n  '-b':'margin-bottom',\n  '-x':('margin-left', 'margin-right'),\n  '-y':('margin-top', 'margin-bottom')); //* All get attribute val, except x & y that get 2 (arr must be pulled out by mixin)\n\n$margin-attrs: ('margin-top', 'margin-right', 'margin-bottom', 'margin-left');\n\n//* Takes each size of margin and sets the value \n@each $margin-class,\n$spacer in $margin-classes {\n  .#{$margin-class} {\n\n    //* Mixin that iterates and sets each side specified\n    @include set-sides($spacer, $margin-attrs);\n\n    //* Creates separate suffixed version to handle each side or combo of sides\n    @each $margin-suffix,\n    $attr in $margin-suffixes {\n\n\n      &#{$margin-suffix} {\n\n        //* Both x (l & r) and y (t & b) use mixin to pull out those 2 attributes\n        @if $margin-suffix=='-x'or $margin-suffix=='-y' {\n          @include set-sides($spacer, $attr);\n        }\n\n        @else {\n          #{$attr}: $spacer !important;\n        }\n      }\n    }\n  }\n}","@import 'utility.scss';\n\n$padding-classes: (\"no-padding\":$spacer-0,\n  'p-xs':$spacer-1,\n  'p-sm':$spacer-2,\n  'p-md':$spacer-3,\n  'p-lg':$spacer-4,\n  'p-xl':$spacer-5,\n  'p-xxl':$spacer-6); //? Each padding class gets spaced out the same amount\n\n$padding-suffixes: ('-t':'padding-top',\n  '-r':'padding-right',\n  '-l':'padding-left',\n  '-b':'padding-bottom',\n  '-x':('padding-left', 'padding-right'),\n  '-y':('padding-top', 'padding-bottom')); //?\n\n$padding-attrs: ('padding-top', 'padding-right', 'padding-bottom', 'padding-left');\n\n@each $padding-class,\n$spacer in $padding-classes {\n  .#{$padding-class} {\n\n    //? Mixin that iterates and sets each side specified\n    @include set-sides($spacer, $padding-attrs);\n\n    @each $padding-suffix,\n    $attr in $padding-suffixes {\n\n      //? Creates separate suffixed version to handle each side or combo of sides\n      &#{$padding-suffix} {\n        @if $padding-suffix=='-x' {\n          @include set-sides($spacer, $attr);\n        }\n\n        @else if $padding-suffix=='-y' {\n          @include set-sides($spacer, $attr);\n        }\n\n        @else {\n          #{$attr}: $spacer !important;\n        }\n      }\n    }\n  }\n}","@import 'variables/typography.scss';\n@import 'variables/colors.scss';\n\n%label-skin {\n  font-size: larger !important;\n  color: white !important;\n  @include set-text-shadow(2px, black);\n}\n\n.form-label {\n  @extend %label-skin;\n  margin-bottom: 0.5em !important;\n}\n\n.form-validation-err {\n  @include set-text-shadow(1px, black);\n  color: $red;\n}","@import \"https://fonts.googleapis.com/css?family=Nunito\"; //? @import can grab actual urls. @use cannot\n\n// Typography\n$font-size-base: 0.9rem;\n$line-height-base: 1.6;\n$font-family-sans-serif: \"Nunito\",\nsans-serif;\n\n@mixin set-text-shadow($size, $color) {\n  text-shadow: (-1*$size) $size 0 $color, $size $size 0 $color, $size (-1*$size) 0 $color, (-1*$size) (-1*$size) 0 $color;\n}"],"sourceRoot":""}